@inject IMatDialogService MatDialogService
@inject HttpClient Http

<MatDialogContent>
    @if (categories != null)
    {
        <MatTextField Label="Beskrivning" @bind-Value="BudgetItem.Description" FullWidth="true" />

        <MatSelectItem Label="Kategori" @bind-Value="@BudgetItem.Category" Items="@categories" FullWidth="true" Class="mt-3">
            <ItemTemplate>
                <span>@context?.Name</span>
            </ItemTemplate>
        </MatSelectItem>

        <MatNumericUpDownField Label="Summa"
                               @bind-Value=@BudgetItem.Amount
                               FieldType="MatNumericUpDownFieldType.Currency"
                               DecimalPlaces=2
                               FullWidth="true"
                               Class="mt-3">
        </MatNumericUpDownField>

    }
</MatDialogContent>
<MatDialogActions>
    @if (categories != null)
    {
        <MatButton OnClick="@(_ => CloseDialog())" Class="mt-3">Cancel</MatButton>
        <MatButton OnClick="@(_ => AddItem())" Class="mt-3">Add</MatButton>
    }
</MatDialogActions>

@code
{
    public ExpenseTracker.Shared.Models.BudgetItem BudgetItem { get; set; }
    private ExpenseTracker.Shared.Models.Category[] categories;
    private bool isOpen = true;

    [CascadingParameter]
    public MatDialogReference DialogReference { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BudgetItem = new BudgetItem();

        categories = await Http.GetFromJsonAsync<ExpenseTracker.Shared.Models.Category[]>(
            "https://localhost:44398/api/Budgets/Categories");
    }

    void CloseDialog()
    {
        DialogReference.Close(null);
    }

    void AddItem()
    {
        DialogReference.Close(BudgetItem);
    }
}