@page "/"
@inject HttpClient Http
@inject IMatDialogService MatDialogService



@if (budget != null)
{
    <div class="mat-layout-grid">
        <h1 class="mb-5">
            Resultat för @cultureInfo.DateTimeFormat.GetMonthName(DateTime.Now.Month)
            <span style="font-size:80%;color:@amountLeftColor()">@String.Format("{0:C2}", budget.AmountLeft())</span>
        </h1>

        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                <h4>Inkomster</h4>
                <MatTable Items="@budget.BudgetItems.Where(b => b.BudgetItemType == BudgetItemType.Income)" ShowPaging="false" PageSize="50" class="mat-elevation-z5">
                    <MatTableHeader>
                        <th>Kategori</th>
                        <th>Summa</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Category.Name</td>
                        <td>
                            @String.Format("{0:C2}", @context.Amount) <span style="font-size: 70%;font-weight:lighter;float:right;">
                                /
                                @String.Format("{0:C2}", baseBudget.BudgetItems.Where(bi => bi.BudgetItemType == BudgetItemType.Income
                                && bi.Category.Name == context.Category.Name).FirstOrDefault()?.Amount)
                            </span>
                        </td>
                    </MatTableRow>
                </MatTable>
                <MatButton OnClick="@(_=>OpenAddBudgetItemDialog(BudgetItemType.Income))">Lägg till inkomst</MatButton>
            </div>
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                <h4>Utgifter</h4>
                <MatTable Items="@budget.BudgetItems.Where(b => b.BudgetItemType == BudgetItemType.Expense).GroupBy(big => big.Category.Name)" ShowPaging="false" PageSize="50" class="mat-elevation-z5">
                    <MatTableHeader>
                        <th>Kategori</th>
                        <th>Summa</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Key</td>
                        <td>
                            @String.Format("{0:C2}", @context.Sum(g => g.Amount)) <span style="font-size: 70%;font-weight:lighter;float:right;">
                                /
                                @String.Format("{0:C2}", baseBudget.BudgetItems.Where(bi => bi.BudgetItemType == BudgetItemType.Expense
                                && bi.Category.Name == context.Key).FirstOrDefault()?.Amount)
                            </span>
                        </td>
                    </MatTableRow>
                </MatTable>
                <MatButton OnClick="@(_=>OpenAddBudgetItemDialog(BudgetItemType.Expense))">Lägg till utgift</MatButton>
            </div>
        </div>

        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                @if (budget.BudgetItems.Where(b => b.BudgetItemType == BudgetItemType.Expense).Count() > 0)
                {
                    <h3 style="margin-top:2em;">Detaljerad lista av utgifter</h3>
                }
                <MatList TwoLine="true">
                    @foreach (var expense in budget.BudgetItems.Where(b => b.BudgetItemType == BudgetItemType.Expense))
                    {
                        <MatListItem>
                            <MatListItemText>
                                <MatListItemPrimaryText>@expense.Category.Name: @String.Format("{0:C2}", expense.Amount)</MatListItemPrimaryText>
                                <MatListItemSecondaryText>@expense.Description | @expense.DateTime</MatListItemSecondaryText>
                            </MatListItemText>
                            <MatButton Class="ml-5" OnClick="@(_ => RemoveBudgetItem(budget.Id, expense.Id))">X</MatButton>
                        </MatListItem>
                    }
                </MatList>
            </div>
        </div>
    </div>
}
else
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}

@code {
    private ExpenseTracker.Shared.Models.Budget budget;
    private ExpenseTracker.Shared.Models.Budget baseBudget;
    private CultureInfo cultureInfo = new CultureInfo("sv-SE");

    protected override async Task OnInitializedAsync()
    {
        await GetBudget();
        await GetBaseBudget();
    }

    private async Task GetBudget()
    {
        budget = await Http.GetFromJsonAsync<ExpenseTracker.Shared.Models.Budget>("https://localhost:44398/api/Budgets/Current");
    }

    private async Task GetBaseBudget() =>
    baseBudget = await Http.GetFromJsonAsync<ExpenseTracker.Shared.Models.Budget>("https://localhost:44398/api/Budgets/Base");

    private async Task RemoveBudgetItem(int id1, int id2)
    {
        await Http.DeleteAsync($"https://localhost:44398/api/Budgets/{id1}/Remove/{id2}");
        await GetBudget();
    }

    private string amountLeftColor()
    {
        if (budget.AmountLeft() > 0)
            return "darkgreen";
        else
            return "darkred";
    }

    async Task OpenAddBudgetItemDialog(BudgetItemType budgetItemType)
    {
        try
        {
            BudgetItem result = (BudgetItem)await MatDialogService.OpenAsync(typeof(AddBudgetItemDialog), new MatDialogOptions());

            if (result == null)
                return;

            result.DateTime = DateTime.Now;
            result.BudgetItemType = budgetItemType;

            var response = await Http.PostAsJsonAsync<ExpenseTracker.Shared.Models.BudgetItem>
                ($"https://localhost:44398/api/Budgets/{budget.Id}/AddBudgetItem", result);

            if (response.StatusCode != System.Net.HttpStatusCode.Created)
                Console.WriteLine("Not created!");
            else
                await GetBudget();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
