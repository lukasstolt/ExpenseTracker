@page "/"
@inject HttpClient Http
@inject IMatDialogService MatDialogService

<h1 class="mb-5">Inkomster och utgifter i @DateTime.Now.ToString("MMMM", CultureInfo.InvariantCulture)</h1>

@if (budget != null)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell">
                <h4>Inkomster</h4>
                <MatTable Items="@budget.Incomes" ShowPaging="false" class="mat-elevation-z5">
                    <MatTableHeader>
                        <th>Kategori</th>
                        <th>Summa</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Category.Name</td>
                        <td>@String.Format("{0:C2}", @context.Amount)</td>
                    </MatTableRow>
                </MatTable>
                <MatButton OnClick="@(_=>OpenAddBudgetItemDialog(BudgetItemType.Income))">Add Income</MatButton>
            </div>
            <div class="mat-layout-grid-cell">
                <h4>Utgifter</h4>
                <MatTable Items="@budget.Expenses" ShowPaging="true" PageSize="5" class="mat-elevation-z5">
                    <MatTableHeader>
                        <th>Kategori</th>
                        <th>Summa</th>
                        <th>Egen anteckning</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Category.Name</td>
                        <td>@String.Format("{0:C2}", @context.Amount)</td>
                        <td>@context.Name</td>
                    </MatTableRow>
                </MatTable>
                <MatButton OnClick="@(_=>OpenAddBudgetItemDialog(BudgetItemType.Expense))">Add Expense</MatButton>
            </div>
        </div>
    </div>
}
else
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}

@code {
    private ExpenseTracker.Shared.Models.Budget budget;

    protected override async Task OnInitializedAsync() => await GetBudget();

    private async Task GetBudget() =>
        budget = await Http.GetFromJsonAsync<ExpenseTracker.Shared.Models.Budget>("https://localhost:44398/api/Budgets/Current");

    async Task OpenAddBudgetItemDialog(BudgetItemType budgetItemType)
    {
        try
        {
            dynamic result;

            if (budgetItemType == BudgetItemType.Expense)
                result = await MatDialogService.OpenAsync(typeof(AddExpenseDialog), null);
            else
                result = await MatDialogService.OpenAsync(typeof(AddIncomeDialog), null);

            if (result is ExpenseTracker.Shared.Models.Expense)
            {
                var expense = (ExpenseTracker.Shared.Models.Expense) result;

                expense.DateTime = DateTime.Now;

                var response = await Http.PostAsJsonAsync<ExpenseTracker.Shared.Models.Expense>
                    ($"https://localhost:44398/api/Budgets/{budget.Id}/AddExpense", expense);

                if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    Console.WriteLine("ERROR");
                else
                    await GetBudget();
            }
            else if(result is ExpenseTracker.Shared.Models.Income)
            {
                var income = (ExpenseTracker.Shared.Models.Income) result;

                income.DateTime = DateTime.Now;

                var response = await Http.PostAsJsonAsync<ExpenseTracker.Shared.Models.Income>
                    ($"https://localhost:44398/api/Budgets/{budget.Id}/AddIncome", income);

                if (response.StatusCode != System.Net.HttpStatusCode.Created)
                    Console.WriteLine("ERROR");
                else
                    await GetBudget();
            }
        }
        catch {}
    }

    enum BudgetItemType
    {
        Income,
        Expense
    }
}